C BÁSICO

- VARIÁVEIS
         Cada variável possui um endereço na memória. Endereços são bytes menos significativos. Diferentes tipos de 
         variáveis, ocupam espaços diferentes:
                int: números inteiros; -2.147.483.648 <-> 2.147.483.648; 32 bits (4 bytes); %d;
                        short int: números inteiros curtos; -32,768 <-> 32,767; 4 bits (2 bytes); %hd;

                        unsigned short int: números inteiros positivos e curtos; 0 <-> 65.535; %hu;

                        unsigned int: números inteiros positivos; 0 <-> 4.294.967.295; 16 bits (4 bytes); %u;

                        long int: números inteiros longos; -2,147,483,648 to 2,147,483,647; 16 bits (4 bytes); %ld;

                        long unsigned int: números inteiros longos e positivos; 0 <-> 4.294.967.295; 16 bits (4 bytes);
                        %lu;

                        long long int: números inteiros muito longos; -(2^63) <-> (2^63) - 1; 64 bits (8 bytes); %lld;

                        long long unsigned int: números inteiros postivos muito longos: 0 <-> 18,446,744,073,709,551,615;
                        64 bits (8 bytes); %llu;

                float: números de ponto flutuante (decimais); 1.2E-38 <-> 3.4E+38; 16 bits (4 bytes); %f;

                double: números de ponto flutuante longos; 3.4E-4932 <-> 1.1E+4932;  64 bits (8 bytes); %lf

                long double: números de ponto flutuante muito longos; 3.4E-4932 <-> 1.1E+4932;  256 bits (816 bytes);
                %Lf;

                char: caracter; -128 <-> 127; 8 bits (1 byte); %c;

                unsigned char: caracter; 0 <-> 255; 8 bits (1 byte); %c;
- int main(void)

        Quando uma função de qualquer tipo tem em sua chamada inicial, nos parênteses, "void" significa que aquela 
        função não recebe argumentos.

- PONTEIROS
        São variáveis capazes de armazenar e manipular endereços de memória, ou seja, são o endereço direto de uma vari-
        ável na memória. Como qualquer outra variável, um ponteiro deve ser declarado, isso é feito pelo uso de um '*'
        antes do nome da variável. Ponteiros possuem tamanho fixo, com seu valor dependendo da arquitetura do OS. Pode 
        ser NULL, valor 0, definido na interface stdlib. Além disso, quando queremos que um ponteiro possua o valor do 
        endereço de uma variável qualquer, usamos '&':
                int numero;
                int *ponteiro;

                ponteiro = &numero;     //Aqui o ponteiro tem o valor da posição da variável 'numero' na memória.

        Para imprimir ponteiros, usamos o especificador de formatação '%p'

- PONTEIROS DE PONTEIROS                
        São assim como ponteiros, usados para armazenar e manipular endereços de memória, sendo a grande diferença, seu 
        uso voltado para ponteiros. Para criar um ponteiro de ponteiro, ao invés de '*', usamos '**' antes do nome do 
        ponteiro.