C BÁSICO

- VARIÁVEIS
         Cada variável possui um endereço na memória. Endereços são bytes menos significativos. Diferentes tipos de 
         variáveis, ocupam espaços diferentes:
                int: números inteiros; -2.147.483.648 <-> 2.147.483.648; 32 bits (4 bytes); %d;
                        short int: números inteiros curtos; -32,768 <-> 32,767; 4 bits (2 bytes); %hd;

                        unsigned short int: números inteiros positivos e curtos; 0 <-> 65.535; %hu;

                        unsigned int: números inteiros positivos; 0 <-> 4.294.967.295; 16 bits (4 bytes); %u;

                        long int: números inteiros longos; -2,147,483,648 to 2,147,483,647; 16 bits (4 bytes); %ld;

                        long unsigned int: números inteiros longos e positivos; 0 <-> 4.294.967.295; 16 bits (4 bytes);
                        %lu;

                        long long int: números inteiros muito longos; -(2^63) <-> (2^63) - 1; 64 bits (8 bytes); %lld;

                        long long unsigned int: números inteiros postivos muito longos: 0 <-> 18,446,744,073,709,551,615;
                        64 bits (8 bytes); %llu;

                float: números de ponto flutuante (decimais); 1.2E-38 <-> 3.4E+38; 16 bits (4 bytes); %f;

                double: números de ponto flutuante longos; 3.4E-4932 <-> 1.1E+4932;  64 bits (8 bytes); %lf

                long double: números de ponto flutuante muito longos; 3.4E-4932 <-> 1.1E+4932;  256 bits (816 bytes);
                %Lf;

                char: caracter; -128 <-> 127; 8 bits (1 byte); %c;

                unsigned char: caracter; 0 <-> 255; 8 bits (1 byte); %c;
- int main(void)

        Quando uma função de qualquer tipo tem em sua chamada inicial, nos parênteses, "void" significa que aquela 
        função não recebe argumentos.
        
- %nd
        quando usamos um número n antes do tipo de dado na formatação de uma impressão, isso está indicando quantos esp-
        aços a mais do que o necessário devem ser impressos. Ou seja, caso estejamos imprimindo o número '1234', quando 
        usarmos a formatação '%2d', o número será impresso normalmente, contudo, caso o número tivesse menos que 2 espa-
        ços, seriam impressos 2 espaços normalmente. O número n reserva uma quantidade de espaços para serem impressos.
        Caso essse número seja de ponto flutuante, tudo após o '.' indica quantas casas o número deve ser arredondado.

- #define
        É definido como um pré-processador que é utilizado para definir 'macros'. 

- MACROS
        São pequenos pedaços de código que podem ser executados com um simples comando, podendo ser utilizados para au-
        tomatizar tarefas, simplificar processos complexos, e aumentar produtividade. Contudo, macros podem gerar riscos
        de segurança, possuem funcionalidade limitada, problemas de compatibilidade, requerem manutenção. Esses riscos 
        se aumentam quando se é criada uma dependência desses elementos.
